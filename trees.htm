<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Trees - Data Structures</title>
    <!-- Bootstrap CSS -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="styles.css">
    <script src="./assets/js/script.js" defer></script>
</head>
<body>

<!-- Navigation Bar -->
<nav class="navbar navbar-expand-lg navbar-light bg-primary">
    <div class="container-fluid">
        <!-- Home Button -->
        <a class="navbar-brand text-white" href="index.htm">Home</a>
        <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav" aria-controls="navbarNav" aria-expanded="false" aria-label="Toggle navigation">
            <span class="navbar-toggler-icon"></span>
        </button>
        <!-- Links on the right -->
        <div class="collapse navbar-collapse justify-content-end" id="navbarNav">
            <ul class="navbar-nav">
                <li class="nav-item">
                    <a class="nav-link text-white" href="array.htm">Array</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link text-white" href="linkedlist.htm">Linked List</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link text-white" href="stack.htm">Stacks</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link text-white" href="queue.htm">Queue</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link text-white" href="trees.htm">Trees</a>
                </li>
            </ul>
        </div>
    </div>
</nav>

<!-- Main Content Area -->
<div class="container mt-5 text-center">
    <h1>Trees</h1>
    <p>A <strong>tree</strong> is a hierarchical data structure that consists of nodes, with a root node and child nodes forming a parent-child relationship. Trees are widely used in applications like databases, file systems, and search algorithms.</p>
    <img src="./assets/images/trees.webp" alt="Tree Diagram" class="img-fluid mt-4">
</div>

<!-- Why Trees are Important -->
<div class="container mt-5 text-center">
    <h2>Why Use Trees?</h2>
    <p>Trees are essential in computer science for the following reasons:</p>
    <ul class="list-unstyled">
        <li>1. Representing hierarchical relationships in data.</li>
        <li>2. Supporting efficient searching, insertion, and deletion operations.</li>
        <li>3. Implementing abstract data types like binary search trees and heaps.</li>
        <li>4. Managing databases and file systems.</li>
    </ul>
</div>

<!-- Code Examples -->
<div class="container mt-5">
    <h2 class="text-center">Code Examples</h2>
    <ul class="list-unstyled">
        <li><code>1. // How to create a tree node</code>
            <pre><code>class TreeNode {
    constructor(value) {
        this.value = value;
        this.left = null;
        this.right = null;
    }
}</code></pre>
        </li>
        <li><code>2. // How to add nodes to a binary tree</code>
            <pre><code>class BinaryTree {
    constructor() {
        this.root = null;
    }

    insert(value) {
        const newNode = new TreeNode(value);
        if (!this.root) {
            this.root = newNode;
            return;
        }

        let current = this.root;
        while (true) {
            if (value < current.value) {
                if (!current.left) {
                    current.left = newNode;
                    break;
                }
                current = current.left;
            } else {
                if (!current.right) {
                    current.right = newNode;
                    break;
                }
                current = current.right;
            }
        }
    }
}</code></pre>
        </li>
        <li><code>3. // How to traverse a tree (Inorder Traversal)</code>
            <pre><code>function inorderTraversal(node) {
    if (node) {
        inorderTraversal(node.left);
        console.log(node.value);
        inorderTraversal(node.right);
    }
}</code></pre>
        </li>
    </ul>
</div>

<!-- Code Editor and Output Section -->
<div class="container mt-5">
    <div class="row">
        <!-- Code Editor -->
        <div class="col-md-6">
            <h2>Write Your Code</h2>
            <textarea id="code-editor" class="form-control" rows="10" placeholder="Write your JavaScript code here..."></textarea>
            <button id="run-code" class="btn btn-primary mt-3">Run Code</button>
        </div>
        <!-- Output Section -->
        <div class="col-md-6">
            <h2>Output</h2>
            <div id="output" class="border p-3 bg-light" style="min-height: 200px;">Your output will appear here...</div>
        </div>
    </div>
</div>

<!-- Footer -->
<footer class="bg-primary text-center text-lg-start mt-5">
    <div class="container p-4">
        <p class="text-center text-white">&copy; 2024 Adnan Bhuiyan. All rights reserved.</p>
    </div>
</footer>

<!-- Bootstrap JS -->
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
</body>
</html>
